// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Unlocked extends ethereum.Event {
  get params(): Unlocked__Params {
    return new Unlocked__Params(this);
  }
}

export class Unlocked__Params {
  _event: Unlocked;

  constructor(event: Unlocked) {
    this._event = event;
  }

  get ethToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiptId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ERC721EthManager extends ethereum.SmartContract {
  static bind(address: Address): ERC721EthManager {
    return new ERC721EthManager("ERC721EthManager", address);
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  usedEvents_(param0: Bytes): boolean {
    let result = super.call("usedEvents_", "usedEvents_(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_usedEvents_(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("usedEvents_", "usedEvents_(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wallet(): Address {
    let result = super.call("wallet", "wallet():(address)", []);

    return result[0].toAddress();
  }

  try_wallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("wallet", "wallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class LockTokenCall extends ethereum.Call {
  get inputs(): LockTokenCall__Inputs {
    return new LockTokenCall__Inputs(this);
  }

  get outputs(): LockTokenCall__Outputs {
    return new LockTokenCall__Outputs(this);
  }
}

export class LockTokenCall__Inputs {
  _call: LockTokenCall;

  constructor(call: LockTokenCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LockTokenCall__Outputs {
  _call: LockTokenCall;

  constructor(call: LockTokenCall) {
    this._call = call;
  }
}

export class LockTokensCall extends ethereum.Call {
  get inputs(): LockTokensCall__Inputs {
    return new LockTokensCall__Inputs(this);
  }

  get outputs(): LockTokensCall__Outputs {
    return new LockTokensCall__Outputs(this);
  }
}

export class LockTokensCall__Inputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LockTokensCall__Outputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }
}

export class LockTokenForCall extends ethereum.Call {
  get inputs(): LockTokenForCall__Inputs {
    return new LockTokenForCall__Inputs(this);
  }

  get outputs(): LockTokenForCall__Outputs {
    return new LockTokenForCall__Outputs(this);
  }
}

export class LockTokenForCall__Inputs {
  _call: LockTokenForCall;

  constructor(call: LockTokenForCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get userAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class LockTokenForCall__Outputs {
  _call: LockTokenForCall;

  constructor(call: LockTokenForCall) {
    this._call = call;
  }
}

export class UnlockTokenCall extends ethereum.Call {
  get inputs(): UnlockTokenCall__Inputs {
    return new UnlockTokenCall__Inputs(this);
  }

  get outputs(): UnlockTokenCall__Outputs {
    return new UnlockTokenCall__Outputs(this);
  }
}

export class UnlockTokenCall__Inputs {
  _call: UnlockTokenCall;

  constructor(call: UnlockTokenCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get receiptId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class UnlockTokenCall__Outputs {
  _call: UnlockTokenCall;

  constructor(call: UnlockTokenCall) {
    this._call = call;
  }
}

export class UnlockTokensCall extends ethereum.Call {
  get inputs(): UnlockTokensCall__Inputs {
    return new UnlockTokensCall__Inputs(this);
  }

  get outputs(): UnlockTokensCall__Outputs {
    return new UnlockTokensCall__Outputs(this);
  }
}

export class UnlockTokensCall__Inputs {
  _call: UnlockTokensCall;

  constructor(call: UnlockTokensCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get receiptId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class UnlockTokensCall__Outputs {
  _call: UnlockTokensCall;

  constructor(call: UnlockTokensCall) {
    this._call = call;
  }
}
