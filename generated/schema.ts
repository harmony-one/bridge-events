// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get destination(): Bytes {
    let value = this.get("destination");
    return value.toBytes();
  }

  set destination(value: Bytes) {
    this.set("destination", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }
}

export class ConfirmationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConfirmationEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConfirmationEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConfirmationEvent", id.toString(), this);
  }

  static load(id: string): ConfirmationEvent | null {
    return store.get("ConfirmationEvent", id) as ConfirmationEvent | null;
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    return value.toBigInt();
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }
}

export class DepositEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositEvent", id.toString(), this);
  }

  static load(id: string): DepositEvent | null {
    return store.get("DepositEvent", id) as DepositEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class RevocationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RevocationEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RevocationEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RevocationEvent", id.toString(), this);
  }

  static load(id: string): RevocationEvent | null {
    return store.get("RevocationEvent", id) as RevocationEvent | null;
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    return value.toBigInt();
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }
}

export class ExecutionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExecutionEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExecutionEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExecutionEvent", id.toString(), this);
  }

  static load(id: string): ExecutionEvent | null {
    return store.get("ExecutionEvent", id) as ExecutionEvent | null;
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    return value.toBigInt();
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }
}

export class ExecutionFailureEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ExecutionFailureEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExecutionFailureEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExecutionFailureEvent", id.toString(), this);
  }

  static load(id: string): ExecutionFailureEvent | null {
    return store.get(
      "ExecutionFailureEvent",
      id
    ) as ExecutionFailureEvent | null;
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    return value.toBigInt();
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }
}

export class OwnerAdditionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OwnerAdditionEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnerAdditionEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnerAdditionEvent", id.toString(), this);
  }

  static load(id: string): OwnerAdditionEvent | null {
    return store.get("OwnerAdditionEvent", id) as OwnerAdditionEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class OwnerRemovalEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OwnerRemovalEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnerRemovalEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnerRemovalEvent", id.toString(), this);
  }

  static load(id: string): OwnerRemovalEvent | null {
    return store.get("OwnerRemovalEvent", id) as OwnerRemovalEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class RequirementChangeEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RequirementChangeEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RequirementChangeEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RequirementChangeEvent", id.toString(), this);
  }

  static load(id: string): RequirementChangeEvent | null {
    return store.get(
      "RequirementChangeEvent",
      id
    ) as RequirementChangeEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get required(): BigInt {
    let value = this.get("required");
    return value.toBigInt();
  }

  set required(value: BigInt) {
    this.set("required", Value.fromBigInt(value));
  }
}

export class SubmissionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SubmissionEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SubmissionEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SubmissionEvent", id.toString(), this);
  }

  static load(id: string): SubmissionEvent | null {
    return store.get("SubmissionEvent", id) as SubmissionEvent | null;
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    return value.toBigInt();
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }
}

export class ReturnedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ReturnedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReturnedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReturnedEvent", id.toString(), this);
  }

  static load(id: string): ReturnedEvent | null {
    return store.get("ReturnedEvent", id) as ReturnedEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class MintedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintedEvent", id.toString(), this);
  }

  static load(id: string): MintedEvent | null {
    return store.get("MintedEvent", id) as MintedEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get oneToken(): Bytes {
    let value = this.get("oneToken");
    return value.toBytes();
  }

  set oneToken(value: Bytes) {
    this.set("oneToken", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get receiptId(): Bytes {
    let value = this.get("receiptId");
    return value.toBytes();
  }

  set receiptId(value: Bytes) {
    this.set("receiptId", Value.fromBytes(value));
  }
}

export class BurnedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BurnedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BurnedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BurnedEvent", id.toString(), this);
  }

  static load(id: string): BurnedEvent | null {
    return store.get("BurnedEvent", id) as BurnedEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }
}

export class LockedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LockedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LockedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LockedEvent", id.toString(), this);
  }

  static load(id: string): LockedEvent | null {
    return store.get("LockedEvent", id) as LockedEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }
}

export class UnlockedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnlockedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnlockedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnlockedEvent", id.toString(), this);
  }

  static load(id: string): UnlockedEvent | null {
    return store.get("UnlockedEvent", id) as UnlockedEvent | null;
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get ethToken(): Bytes {
    let value = this.get("ethToken");
    return value.toBytes();
  }

  set ethToken(value: Bytes) {
    this.set("ethToken", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get receiptId(): Bytes {
    let value = this.get("receiptId");
    return value.toBytes();
  }

  set receiptId(value: Bytes) {
    this.set("receiptId", Value.fromBytes(value));
  }
}
