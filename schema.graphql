type EventTransaction @entity {
  id: ID!
  destination: Bytes!
  value: BigInt!
  data: Bytes!
  executed: Boolean!
}

### MULTI SIG WALLET ####
type ConfirmationEvent @entity {
  transaction: EventTransaction
  eventName: String!
  id: ID!
  sender: Bytes!
  transactionId: BigInt!
}

type DepositEvent @entity {
  eventName: String!
  id: ID!
  sender: Bytes!
  value: BigInt!
}

type RevocationEvent @entity {
  transaction: EventTransaction
  eventName: String!
  id: ID!
  sender: Bytes!
  transactionId: BigInt!
}

type ExecutionEvent @entity {
  transaction: EventTransaction!
  eventName: String!
  id: ID!
  transactionId: BigInt!
}

type ExecutionFailureEvent @entity {
  transaction: EventTransaction
  eventName: String!
  id: ID!
  transactionId: BigInt!
}

type OwnerAdditionEvent @entity {
  eventName: String!
  id: ID!
  owner: Bytes!
}

type OwnerRemovalEvent @entity {
  eventName: String!
  id: ID!
  owner: Bytes!
}

type RequirementChangeEvent @entity {
  eventName: String!
  id: ID!
  required: BigInt!
}

type SubmissionEvent @entity {
  transaction: EventTransaction
  eventName: String!
  id: ID!
  transactionId: BigInt!
}

#### DEPOSIT ######
type ReturnedEvent @entity {
  eventName: String!
  id: ID!
  recipient: Bytes!
  amount: BigInt!
}

#### Harmony ####
type MintedEvent @entity {
  eventName: String!
  id: ID!
  amount: BigInt!
  oneToken: Bytes!
  recipient: Bytes!
  receiptId: Bytes!
}

type BurnedEvent @entity {
  eventName: String!
  id: ID!
  token: Bytes!
  sender: Bytes!
  amount: BigInt!
  recipient: Bytes!
}

#### Ethereum ####
type LockedEvent @entity {
  eventName: String!
  id: ID!
  token: Bytes!
  sender: Bytes!
  amount: BigInt!
  recipient: Bytes!
}

type UnlockedEvent @entity {
  eventName: String!
  id: ID!
  amount: BigInt!
  ethToken: Bytes!
  recipient: Bytes!
  receiptId: Bytes!
}
